# -*-eselect-*-  vim: ft=eselect
# Copyright 1999-2010 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
#
# Author:  Martin Schlemmer <azarah@gentoo.org>
# Further modifications by Michał Górny <mgorny@gentoo.org>
# Further modifications by Tomáš Chvátal <scarabeus@gentoo.org>
# Further modifications by Donnie Berkholz <dberkholz@gentoo.org>
# Further modifications based off submissions to bug #54984 <cyfred@gentoo.org>
# Further modifications by Jeremy Huddleston <eradicator@gentoo.org>
# Made into eselect module by Jeremy Huddleston <eradicator@gentoo.org>

inherit multilib package-manager config

# Eselect data
DESCRIPTION="Manage the OpenGL implementation used by your system"
MAINTAINER="x11@gentoo.org"
SVN_DATE='$Date$'
VERSION=$(svn_date_to_version "${SVN_DATE}" )
EBUILD_VERSION="1.2.1"

# Our data
ENV_FILE="${EROOT}/etc/env.d/03opengl"
PREFIX="${EROOT}/usr"
DST_PREFIX="${EROOT}/usr"
unset IGNORE_MISSING

get_current_implementation() {
	local ret
	local ldpath=$(load_config "${ENV_FILE}" LDPATH)
	local opengl_profile=$(load_config "${ENV_FILE}" OPENGL_PROFILE)

	if [[ -n ${opengl_profile} ]] ; then
		ret="${opengl_profile}"
	elif [[ -n ${ldpath} ]] ; then
		ret="${ldpath%%:*}"
		ret="${ret##*opengl/}"
		ret="${ret%/lib*}"
	fi

	echo ${ret}
}

get_implementations() {
	local ret
	local libdir
	local dir
	local dir_name

	for libdir in $(list_libdirs) ; do
		[[ ${ROOT} != / ]] && libdir=${libdir#${EROOT}}
		for dir in "${PREFIX}/${libdir}"/opengl/* ; do
			dir_name=$(basename "${dir}")
			[[ -d ${dir} && ${dir_name} != "global" ]] || continue
			has ${dir_name} ${ret} && continue
			ret=${ret:+${ret} }${dir_name}
		done
	done

	echo ${ret}
}

# 1: file
# 2: workdir
upgrade_file() {
	local file=$1
	local filename
	local workdir=$2
	local linkfile=$(relative_name ${file} "${workdir}")

	[[ -f ${file} ]] || return
	filename=$(basename "${file}")

	if [[ -f ${filename} || ( -L ${filename} && ! -e ${filename} ) ]] ; then
		rm -f "${filename}"* || die -q "Failed to delete ${workdir}/${filename}"
	fi

	#echo "DEBUG: ln -s \"${linkfile}\" \"${filename}\""
	if [[ "x${REMOVE_ONLY}" == "xfalse" ]]; then
		ln -s "${linkfile}" "${filename}" || die -q "Failed to create symlink ${workdir}/${filename}"
	fi
}

setup_soname_symlinks() {
	local file=$1
	local target=$2
	local soname
	local scanner

	# if we have .so or dylib we need to make its soname symlinked
	# in order to be easy to find and faster to grab
	if [[ ${file} == *.so || ${file} == *.dylib ]] ; then
		[[ ${file} == *.so ]] && scanner=scanelf || scanner="scanmacho"
		soname=$(${scanner} -qBF '%S#p' "${file}" | head -n1)
		[[ ${file} == *.so ]] && soname="${file%/*}"/${soname}
		upgrade_file "${soname}" "${target}"
	fi
}

setup_lib_symlinks() {
	local profile_libdir=$1
	local target=$2
	local file

	mkdir -p "${target}" || die "Failed to create ${target}"

	pushd "${target}" &> /dev/null
		# Note that lafiles are removed here and never enabled again
		for file in libGL{,core}.la ; do
			rm -f "${file}"* || die -q "Failed to delete ${file}"
		done

		for file in "${profile_libdir}"/lib{EGL,GL*,OpenVG}{,core}.{so,dylib,a}; do
			upgrade_file "${file}" "${target}"
			setup_soname_symlinks "${file}" "${target}"
		done
	popd &> /dev/null
}

setup_extensions_symlinks() {
	local src=$1
	local target=$2

	if [[ -e ${src} ]] ; then
		mkdir -p "${target}" || die "Failed to create ${target}"
		pushd "${target}" &> /dev/null
			# First remove old cruft symlinks
			for file in lib{wfb,glx,dri,dri2}.{so,dylib,a}; do
				rm -f "${file}" || die -q "Failed to delete ${targetdir}/${file}"
			done

			# regenerate symlinks
			for file in "${src}"/*.{so,dylib,a}; do
				upgrade_file "${file}" "${target}"
				setup_soname_symlinks "${file}" "${target}"
			done
		popd &> /dev/null
	fi
}

setup_includes_symlinks() {
	local target=$1
	local files=$2
	local file
	local mdir=$3
	local sdir

	shift 2
	mkdir -p "${target}" || die "Failed to create ${target}"
	pushd "${target}" &> /dev/null
		for file in ${files}; do
			for sdir in "$@"; do
				if [[ -e ${sdir}/${file} ]]; then
					upgrade_file "${sdir}/${file}" "${target}"
					break
				fi
			done
		done
		test -d ${mdir} && for file in ${mdir}/*.h; do
			upgrade_file "${file}" "${target}"
		done
	popd &> /dev/null
}

set_new_implementation() {
	local gl_implem=$1
	local avail_implems=$(get_implementations)
	local libdir
	local moduledir
	local gl_dir
	local gl_local
	local -A gl_header

	# Set a sane umask... bug #83115
	umask 022

	if ! has ${gl_implem} ${avail_implems}; then
		die -q "Invalid opengl implementation selected."
	fi

	if [[ -z ${IGNORE_MISSING+1} ]]; then
		local found_libgl
		for libdir in $(list_libdirs); do
			[[ ${ROOT} != / ]] && libdir=${libdir#${EROOT}}
			[[ -d ${PREFIX}/${libdir}/opengl && ! -h ${PREFIX}/${libdir} ]] || continue
			[[ -f "${PREFIX}/${libdir}/opengl/${gl_implem}/lib/libGL.so" || -f "${PREFIX}/${libdir}/opengl/${gl_implem}/.gles-only" ]] && found_libgl=yes
		done

		if [[ -z ${found_libgl} ]]; then
			write_error_msg "The ${gl_implem} OpenGL implementation doesn't seem to provide"
			write_error_msg "libGL.so file. This might be an effect of breakage introduced"
			write_error_msg "by a prioprietary driver installer. Please re-merge the package"
			write_error_msg "providing your OpenGL implementation."
			die -q "Selected OpenGL implementation incomplete."
		fi
	fi

	echo -n "Switching to ${gl_implem} OpenGL interface..."
	if [[ -f ${ENV_FILE} ]] ; then
		rm -f "${ENV_FILE}" || die -q "Failed to remove ${ENV_FILE}"
	fi

	for libdir in $(list_libdirs); do
		# Set libdir correctly to EROOT
		[[ ${ROOT} != / ]] && libdir=${libdir#${EROOT}}

		# First make sure we have an opengl directory and this
		# is a real lib dir, not a symlink
		[[ -d ${PREFIX}/${libdir}/opengl && ! -h ${PREFIX}/${libdir} ]] || continue

		# Set moduledir
		# only xorg module is used now can change to case when we add other
		# implementations.
		moduledir="xorg/modules"

		# Check if opengl implementation directory exists
		# and use xorg-x11 as fallback (mesa)
		# If even mesa is not around then simply die
		if [[ -d "${PREFIX}/${libdir}/opengl/${gl_implem}" ]] ; then
			gl_local="${gl_implem}"
			REMOVE_ONLY="false" # global variable
		else
			# we are moving to implementation that does not have any support
			# for specified libdir (ie 32bit libs for mesa) so we should
			# remove the current symlinks and continue like nothing happened.
			REMOVE_ONLY="true" # global variable
			gl_local=$(get_current_implementation)
			if ! has ${gl_local} ${avail_implems}; then
				# skipping the libdir cause there was no profile actually
				# selected before
				continue 2
			fi
		fi

		setup_lib_symlinks \
			"${PREFIX}/${libdir}/opengl/${gl_local}/lib" \
			"${DST_PREFIX}/${libdir}"

		# check if the implementation has TLS libs around
		# and install those if around
		[[ -e ${PREFIX}/${libdir}/opengl/${gl_local}/lib/tls ]] && \
			setup_lib_symlinks \
				"${PREFIX}/${libdir}/opengl/${gl_local}/lib/tls" \
				"${DST_PREFIX}/${libdir}/tls"

		setup_extensions_symlinks \
			"${PREFIX}/${libdir}/opengl/${gl_local}/extensions" \
			"${DST_PREFIX}/${libdir}/${moduledir}/extensions"

		gl_header[GL]="gl.h glx.h glxtokens.h glext.h glxext.h glxmd.h glxproto.h"
		gl_header[GLES]="egl.h gl_extensions.h glext.h gl.h glplatform.h"
		gl_header[GLES2]="gl2ext.h gl2.h gl2platform.h"
		gl_header[EGL]="eglext.h egl.h eglplatform.h"
		gl_header[KHR]="khrplatform.h"
		gl_header[VG]="openvg.h vgext.h vgplatform.h vgu.h"
		for gl_dir in {EGL,GL,GLES,GLES2,KHR,VG}; do
			setup_includes_symlinks \
			"${DST_PREFIX}/include/${gl_dir}" \
				"${gl_header[${gl_dir}]}" \
			"${PREFIX}/${libdir}/opengl/${gl_implem}/include/${gl_dir}/" \
			"${PREFIX}/${libdir}/opengl/global/include/${gl_dir}" \
			"${PREFIX}/${libdir}/opengl/xorg-x11/include/${gl_dir}/"
		done
		# Setup the $LDPATH
		if [[ "x${REMOVE_ONLY}" == "xfalse" ]]; then
			# we need this relative to ROOT
			ldpath="${ldpath:+${ldpath}:}${PREFIX#${ROOT}}/${libdir}/opengl/${gl_local}/lib"
		fi
	done

	store_config ${ENV_FILE} LDPATH "${ldpath}"
	store_config ${ENV_FILE} OPENGL_PROFILE "${gl_implem}"

	do_action env update &> /dev/null

	echo " done"
}

### show action ###
describe_show() {
	echo "Print the current OpenGL implementation."
}

do_show() {
	local current=$(get_current_implementation)

	if [[ -n ${current} ]] ; then
		echo ${current}
		return 0
	else
		echo "(none)"
		return 2
	fi
}

### list action ###
describe_list() {
	echo "List the available OpenGL implementations."
}

do_list() {
	local targets=( $(get_implementations) )
	local i

	write_list_start "Available OpenGL implementations:"
	for (( i = 0; i < ${#targets[@]}; i++ )); do
		[[ ${targets[i]} = $(get_current_implementation) ]] \
			&& targets[i]=$(highlight_marker "${targets[i]}")
	done
	write_numbered_list -m "(none found)" "${targets[@]}"
}

### set action ###
describe_set() {
	echo "Select the OpenGL implementation."
}

describe_set_parameters() {
	echo "<target>"
}

describe_set_options() {
	echo "<target> : The profile to activate"
	echo "--use-old : If an implementation is already set, use that one instead"
	echo "--prefix=<val> : Set the source prefix (default: /usr)"
	echo "--dst-prefix=<val> : Set the destination prefix (default: /usr)"
	echo "--ignore-missing : Ignore missing files when setting a new implementation"
}

do_set() {
	local action="error"
	local current=$(get_current_implementation)
	local available=$(get_implementations)
	local new
	local opt

	while [[ ${#@} -gt 0 ]] ; do
		opt=$1
		shift
		case ${opt} in
			--use-old)
				if [[ -n ${current} ]] && has ${current} ${available}; then
					action="old-implementation"
				fi
			;;
			--prefix=*)
				PREFIX=${ROOT}${opt#*=}
				available=$(get_implementations)
			;;
			--dst-prefix=*)
				DST_PREFIX=${ROOT}${opt#*=}
			;;
			--ignore-missing)
				IGNORE_MISSING=1
			;;
			*)
				if [[ ${action} != "old-implementation" ]] ; then
					action="set-implementation"
				fi

				if is_number ${opt} ; then
					targets=( $(get_implementations) )
					new=${targets[$(( ${opt} - 1 ))]}
					if [[ -z ${new} ]] ; then
						die -q "Unrecognized option: ${opt}"
					fi
				elif has ${opt} ${available}; then
					new="${opt}"
				else
					die -q "Unrecognized option: ${opt}"
				fi
			;;
		esac
	done

	case ${action} in
		old-implementation)
			set_new_implementation ${current}
			return $?
		;;
		set-implementation)
			if [[ -n ${new} ]] ; then
				set_new_implementation ${new}
				return $?
			else
				die -q "Please specify an implementation to set"
			fi
		;;
		*)
			die -q "Invalid usage of set action."
		;;
	esac
}
