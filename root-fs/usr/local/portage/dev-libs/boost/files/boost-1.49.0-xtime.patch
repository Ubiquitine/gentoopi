--- a/boost/thread/xtime.hpp	2008-06-18 15:01:08.000000000 +0200
+++ b/boost/thread/xtime.hpp	2012-07-05 23:53:10.687791868 +0200
@@ -18,18 +18,6 @@
 
 namespace boost {
 
-enum xtime_clock_types
-{
-    TIME_UTC=1
-//    TIME_TAI,
-//    TIME_MONOTONIC,
-//    TIME_PROCESS,
-//    TIME_THREAD,
-//    TIME_LOCAL,
-//    TIME_SYNC,
-//    TIME_RESOLUTION
-};
-
 struct xtime
 {
 #if defined(BOOST_NO_INT64_T)
--- a/libs/thread/src/pthread/timeconv.inl	2012-01-03 18:31:50.000000000 +0100
+++ b/libs/thread/src/pthread/timeconv.inl	2012-07-05 23:55:31.510677539 +0200
@@ -20,8 +20,8 @@
 inline void to_time(int milliseconds, boost::xtime& xt)
 {
     int res = 0;
-    res = boost::xtime_get(&xt, boost::TIME_UTC);
-    BOOST_ASSERT(res == boost::TIME_UTC); (void)res;
+    res = boost::xtime_get(&xt, TIME_UTC);
+    BOOST_ASSERT(res == TIME_UTC);
 
     xt.sec += (milliseconds / MILLISECONDS_PER_SECOND);
     xt.nsec += ((milliseconds % MILLISECONDS_PER_SECOND) *
@@ -56,8 +56,8 @@
 {
     boost::xtime cur;
     int res = 0;
-    res = boost::xtime_get(&cur, boost::TIME_UTC);
-    BOOST_ASSERT(res == boost::TIME_UTC); (void)res;
+    res = boost::xtime_get(&cur, TIME_UTC);
+    BOOST_ASSERT(res == TIME_UTC);
 
     if (boost::xtime_cmp(xt, cur) <= 0)
     {
@@ -87,8 +87,8 @@
 {
     boost::xtime cur;
     int res = 0;
-    res = boost::xtime_get(&cur, boost::TIME_UTC);
-    BOOST_ASSERT(res == boost::TIME_UTC); (void)res;
+    res = boost::xtime_get(&cur, TIME_UTC);
+    BOOST_ASSERT(res == TIME_UTC);
 
     if (boost::xtime_cmp(xt, cur) <= 0)
         milliseconds = 0;
@@ -109,8 +109,8 @@
 {
     boost::xtime cur;
     int res = 0;
-    res = boost::xtime_get(&cur, boost::TIME_UTC);
-    BOOST_ASSERT(res == boost::TIME_UTC); (void)res;
+    res = boost::xtime_get(&cur, TIME_UTC);
+    BOOST_ASSERT(res == TIME_UTC);
 
     if (boost::xtime_cmp(xt, cur) <= 0)
         microseconds = 0;
